[{"content":"GitHub Page 功能是 GitHub 提供的一項支援靜態網頁的服務，只要在你的 repository 中加入一個名為 gh-pages 的分支，則 GitHub 便會預設將此分支內的檔案以靜態網頁的方式呈現，因此利用此特性就可很容易的製作一個簡單的網站。GitHub Pages 提供了二種不同形態的頁面 \u0026ldquo;User or organization site\u0026rdquo; \u0026amp; \u0026ldquo;Project Site\u0026rdquo;。其中個人/組織 網站一個 GitHub 帳號只能有一個、而專案網站則可以很多個。\n https://calvinegs.github.io #只有一個 https://calvinegs.github.io/project1\nhttps://calvinegs.github.io/project2\nhttps://calvinegs.github.io/project3\n\u0026hellip;\n 安裝步驟 Step 1: 在 GitHub 上建立一個 new repository Repository name 若為 Owner_name.github.io 即所謂的 User site，Repository name 即為靜態網站的網址。以下圖為例，有效網址為 https://calvinegs.github.io\nStep 2: 使用 GitHub Action 構建 Hugo 透過 GitHub Action 功能，在你每次將新版本的 Hugo 網站內容推送到 GitHub repository 時，GitHub 將自動建置網站。\n新增一個 .github/workflows/gh-pages.yml，內容如下:\nname: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public Step 3: GitHub Page 的設置 在第一次推送 Hugo 網站內容推送到 GitHub repository 時，透過 GitHub Action 的建置，將在你的 repository 中新新一個分支名稱叫 gh-pages。請在 GitHub Page 的設置功能中將它由 \u0026ldquo;Main\u0026rdquo; 指向 \u0026ldquo;gh-pages\u0026rdquo; 分支。\nStep 4: 設置 Hugo 設定檔 將 Hugo 設定檔 config.toml 中的 baseURL 設定成 https://Owner_name.github.io。\nbaseurl = \u0026#34;https://calvinabba.github.io\u0026#34; DefaultContentLanguage = \u0026#34;en\u0026#34; title = \u0026#34;Beautiful Blog\u0026#34; theme = \u0026#34;beautifulhugo\u0026#34; ","permalink":"https://calvinegs.github.io/posts/deployhugo-githubpages/","summary":"GitHub Page 功能是 GitHub 提供的一項支援靜態網頁的服務，只要在你的 repository 中加入一個名為 gh-pages 的分支，則 GitHub 便會預設將此分支內的檔案以靜態網頁的方式呈現，因此利用此特性就可很容易的製作一個簡單的網站。GitHub Pages 提供了二種不同形態的頁面 \u0026ldquo;User or organization site\u0026rdquo; \u0026amp; \u0026ldquo;Project Site\u0026rdquo;。其中個人/組織 網站一個 GitHub 帳號只能有一個、而專案網站則可以很多個。\n https://calvinegs.github.io #只有一個 https://calvinegs.github.io/project1\nhttps://calvinegs.github.io/project2\nhttps://calvinegs.github.io/project3\n\u0026hellip;\n 安裝步驟 Step 1: 在 GitHub 上建立一個 new repository Repository name 若為 Owner_name.github.io 即所謂的 User site，Repository name 即為靜態網站的網址。以下圖為例，有效網址為 https://calvinegs.github.io\nStep 2: 使用 GitHub Action 構建 Hugo 透過 GitHub Action 功能，在你每次將新版本的 Hugo 網站內容推送到 GitHub repository 時，GitHub 將自動建置網站。\n新增一個 .github/workflows/gh-pages.yml，內容如下:\nname: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.","title":"在 Github Pages 部署 Hugo 靜態網站"},{"content":"Hugo 是一個静態網站生成器，搭配 git 很適合來建立個人部落格。在一系列的筆記中將介紹如何安裝/使用相關工具與技術，目的是搭建一個完全免費的個人部落格。\n使用的相關工具/技術:\n Hugo git vs code gist github page Markdown  Chocolatey Chocolatey 是一個 Windows 上的套件管理工具，它結合了 Nuget 基礎服務與 powershell 指令，提供快速安裝應用程式與工具的服務，將安裝軟體的內容封裝到一個安裝包中，在 Chocolatey 中只需要一條簡單的指令就能完成搜尋、安裝、更新、解安裝等操作。\n在 Windows 10 上安裝 Chocolatey 在命令提示字元下執行以下指令\nPS C:\\\u0026gt;Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://community.chocolatey.org/install.ps1\u0026#39;)) 移除 Chocolatey 刪除 C:\\ProgramData\\chocolatey 目錄及移除環境變數即可，搜尋 \u0026ldquo;編輯系統環境變數\u0026rdquo; \\ \u0026ldquo;進階\u0026rdquo; \\ \u0026ldquo;環境變數\u0026rdquo;\n安裝 hugo Step 1: 在 Windows 10 上使用 choco 安裝 hugo C:\\\u0026gt; choco install hugo -confirm C:\\\u0026gt; choco install hugo-extended - config C:\\\u0026gt; hugo version Step 2: Create a New Site (建立部落格網站) C:\\\u0026gt; hugo new site quickstart C:\\\u0026gt; hugo new site quickstart -f yml # 若要使用 config.yaml 為 config 設定檔，則加入額外參數 Step 3: Add a Theme (新增部落格主題) 請先確認在您的作業系統中已經安裝了 git\nC:\\\u0026gt; cd quickstart C:\\\u0026gt; git init C:\\\u0026gt; git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke C:\\\u0026gt; git submodule update --init --recursive # needed when you reclone your repo (submodules may not get cloned automatically) 在 config.toml 中加入 theme = \u0026ldquo;ananke\u0026rdquo;\nC:\\\u0026gt; echo \u0026#39;theme = \u0026#34;ananke\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.toml Step 4: Add Some Content (建立新文章) C:\\\u0026gt; hugo new posts/my-first-post.md 在 md file 中加入以下內容\n # Test Page\nThis is my first test page.\n Step 5: Start the Hugo server (本機測試) C:\\\u0026gt; hugo server -D 開啟瀏覽器，輸入網址 https://localhost:1313 ","permalink":"https://calvinegs.github.io/posts/installhugo-windows/","summary":"Hugo 是一個静態網站生成器，搭配 git 很適合來建立個人部落格。在一系列的筆記中將介紹如何安裝/使用相關工具與技術，目的是搭建一個完全免費的個人部落格。\n使用的相關工具/技術:\n Hugo git vs code gist github page Markdown  Chocolatey Chocolatey 是一個 Windows 上的套件管理工具，它結合了 Nuget 基礎服務與 powershell 指令，提供快速安裝應用程式與工具的服務，將安裝軟體的內容封裝到一個安裝包中，在 Chocolatey 中只需要一條簡單的指令就能完成搜尋、安裝、更新、解安裝等操作。\n在 Windows 10 上安裝 Chocolatey 在命令提示字元下執行以下指令\nPS C:\\\u0026gt;Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://community.chocolatey.org/install.ps1\u0026#39;)) 移除 Chocolatey 刪除 C:\\ProgramData\\chocolatey 目錄及移除環境變數即可，搜尋 \u0026ldquo;編輯系統環境變數\u0026rdquo; \\ \u0026ldquo;進階\u0026rdquo; \\ \u0026ldquo;環境變數\u0026rdquo;\n安裝 hugo Step 1: 在 Windows 10 上使用 choco 安裝 hugo C:\\\u0026gt; choco install hugo -confirm C:\\\u0026gt; choco install hugo-extended - config C:\\\u0026gt; hugo version Step 2: Create a New Site (建立部落格網站) C:\\\u0026gt; hugo new site quickstart C:\\\u0026gt; hugo new site quickstart -f yml # 若要使用 config.","title":"在 Windows 10 使用 Hugo"}]