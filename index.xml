<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>永誌不忘 • 筆記簿</title>
    <link>https://calvinegs.github.io/</link>
    <description>Recent content on 永誌不忘 • 筆記簿</description>
    <image>
      <url>https://calvinegs.github.io/papermod-cover.png</url>
      <link>https://calvinegs.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://calvinegs.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 Node.js &#43; express &#43; MySQL 建立一個後端服務 REST API</title>
      <link>https://calvinegs.github.io/posts/nodejs-restapi-mysql/</link>
      <pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/nodejs-restapi-mysql/</guid>
      <description>Node.js &#43; express 來建立 REST API 服務，同時為提高網路安全性採取了 JWT JSON Web Token）來實作使用者驗證機制。資料庫的部份是使用 MySQL，為方便起見，採用 Docker 來執行 MySQL。</description>
    </item>
    
    <item>
      <title>使用 Docker 執行 MySQL</title>
      <link>https://calvinegs.github.io/posts/docker-mysql/</link>
      <pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/docker-mysql/</guid>
      <description>在開發的環境中我們常會需要搭配資料庫，而常見的資料庫管理系統種類、版本繁多，如果搭直接安裝在 local 端作業系統中，可能會造成開發環境混亂，其中採 Docker 方式來安裝測試用資料庫的方式是一個不錯的解決方案</description>
    </item>
    
    <item>
      <title>使用 Angular 14 建立 Reactive Form 表單驗證範例</title>
      <link>https://calvinegs.github.io/posts/angular-auth-jwt/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/angular-auth-jwt/</guid>
      <description>在這個範例中可以看到使用 Angular Reactive Form 搭配 Bootstrip UI Framework 所建立的｀使用者資料註冊｀功能，同時實現一個簡易版的｀自定驗證器｀(custome validator)</description>
    </item>
    
    <item>
      <title>使用 Node.js &#43; express &#43; postgres 建立一個後端服務 REST API</title>
      <link>https://calvinegs.github.io/posts/nodejs-restapi-postgres/</link>
      <pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/nodejs-restapi-postgres/</guid>
      <description>Node.js &#43; express 來建立 REST API 服務，同時為提高網路安全性採取了 JWT JSON Web Token）來實作使用者驗證機制。資料庫的部份是使用 PostgresSQL，為方便起見，採用 Docker 來執行 PostgresSQL。</description>
    </item>
    
    <item>
      <title>使用 .NET 6.0 進行 JWT 身份驗證的 ASP.NET Web Api。並使用 Microsoft Identity 框架來存儲使用者和角色等資料（使用 PostgresSQL）</title>
      <link>https://calvinegs.github.io/posts/dotnet6-webapi-jwt-postgres/</link>
      <pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/dotnet6-webapi-jwt-postgres/</guid>
      <description>採用 PostgresSQL 為後端資料庫，使用 .NET 6.0 進行 JWT 身份驗證的 ASP.NET Web Api。並使用 Microsoft Identity 框架來存儲使用者和角色等資料</description>
    </item>
    
    <item>
      <title>使用 Docker 執行 PostgresSQL 與 pgAdmin</title>
      <link>https://calvinegs.github.io/posts/docker-postgres-pgadmin/</link>
      <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/docker-postgres-pgadmin/</guid>
      <description>在開發的環境中我們常會需要搭配資料庫，而常見的資料庫管理系統種類、版本繁多，如果搭直接安裝在 local 端作業系統中，可能會造成開發環境混亂，其中採 Docker 方式來安裝測試用資料庫的方式是一個不錯的解決方案</description>
    </item>
    
    <item>
      <title>使用 Angular 13 建立 Reactive Form 表單驗證範例</title>
      <link>https://calvinegs.github.io/posts/angular-formvalidate/</link>
      <pubDate>Sat, 28 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/angular-formvalidate/</guid>
      <description>在這個範例中可以看到使用 Angular Reactive Form 搭配 Bootstrip UI Framework 所建立的｀使用者資料註冊｀功能，同時實現一個簡易版的｀自定驗證器｀(custome validator)</description>
    </item>
    
    <item>
      <title>使用 .NET 6.0 進行 JWT 身份驗證的 ASP.NET Web Api。並使用 Microsoft Identity 框架來存儲使用者和角色等資料</title>
      <link>https://calvinegs.github.io/posts/dotnet6-webapi-jwt/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/dotnet6-webapi-jwt/</guid>
      <description>在前面的筆記中已紀錄了使用 ASP.NET Core 所提供的精簡 Minimal APIs 新框架。本篇將要紀錄如何使用　.NET 6.0“正統”的 MVC Web Api 架構來撰寫一個可方便擴展 Web API</description>
    </item>
    
    <item>
      <title>Run SQL Server container images with Docker</title>
      <link>https://calvinegs.github.io/posts/sqlserver2019-docker/</link>
      <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/sqlserver2019-docker/</guid>
      <description>在開發的環境中我們常會需要搭配資料庫，而常見的資料庫管理系統種類、版本繁多，如果搭直接安裝在 local 端作業系統中，可能會造成開發環境混亂，其中採 Docker 方式來安裝測試用資料庫的方式是一個不錯的解決方案</description>
    </item>
    
    <item>
      <title>使用 ASP.NET Core 6 提供的 Minimal APIs 新框架建置一個極簡的 Web API 服務</title>
      <link>https://calvinegs.github.io/posts/dotnet6-minimalapi-jwt/</link>
      <pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/dotnet6-minimalapi-jwt/</guid>
      <description>在 ASP.NET Core 提供 Minimal APIs 新框架前，你使用的是 MVC 框架，比起 Node.js &#43; Express MVC 框架是顯得煩複許多，也許你只是一個提供極簡 rest web api 服務如：Microservices，但你還是得先建好必要的程式架構才能開始你的程式撰寫，有了 Minimal APIs 新框架後一切都變得簡單了</description>
    </item>
    
    <item>
      <title>使用 Snowpack &#43; Typescript 來建置一個 Web App</title>
      <link>https://calvinegs.github.io/posts/snowpack-typescript/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/snowpack-typescript/</guid>
      <description>前端技術（架構）的蓬勃發展，使得建構（打包）工具（Bundler）也隨之推陳出新。之前寫過使用 parcel.js 搭配 Typescript 來開發前端應用程式的筆記。今天要來試試更新的打包工具 Snowpack，</description>
    </item>
    
    <item>
      <title>使用 Node.js &#43; express 建立一個電子商務後端服務的 REST API</title>
      <link>https://calvinegs.github.io/posts/nodejs-restapi-example/</link>
      <pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/nodejs-restapi-example/</guid>
      <description>Node.js &#43; express 來建立 REST API 服務，同時為提高網路安全性採取了 JWT JSON Web Token）來實作使用者驗證機制。而資料庫的部份是使用 MongoDB，但為方便起見，採直接使用MongoDB Cloud Services。</description>
    </item>
    
    <item>
      <title>透過範例了解 Javascript Rest ＆ Spread 運算符有何不同</title>
      <link>https://calvinegs.github.io/posts/rest-spread-js/</link>
      <pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/rest-spread-js/</guid>
      <description>JavaScript 使用三個點 (...) 來表示rest(其餘)運算符和Spread(擴展)運算符。但這兩個運算符並不相同。</description>
    </item>
    
    <item>
      <title>透過範例了解 Javascript Destructuring (解構指定值)</title>
      <link>https://calvinegs.github.io/posts/destructuring-js/</link>
      <pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/destructuring-js/</guid>
      <description>透過 解構 語法可以方便的用來擷取陣列或物件中的資料</description>
    </item>
    
    <item>
      <title>Ubuntu 終端機常用快速鍵</title>
      <link>https://calvinegs.github.io/posts/terminal-shortcuts/</link>
      <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/terminal-shortcuts/</guid>
      <description>在 Linux 環境中最常用的有概是 ‘終端機’ （Terminal）了，使用快速鍵更能幫助你加快了日常的工作</description>
    </item>
    
    <item>
      <title>透過範例學習 Emmet 語法</title>
      <link>https://calvinegs.github.io/posts/emmet-syntax/</link>
      <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/emmet-syntax/</guid>
      <description>Emmet extension 是一個協助編寫 Html 或 CSS 語法的有力工具，透過範例來學習 Emmet 所支援的語法是最快上手的方式。</description>
    </item>
    
    <item>
      <title>使用 Parcel.js &#43; Typescript 來建置一個 Web App</title>
      <link>https://calvinegs.github.io/posts/parcel-typescript/</link>
      <pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/parcel-typescript/</guid>
      <description>使用 Typescript 來開發前端應用程式已是一個趨勢，透過 Parcel.js 的幫助，可以快速地建置一個簡潔又有彈性的開發環境，來學習 Typescript</description>
    </item>
    
    <item>
      <title>ASP.NET Core 6 Web API 使用 Dapper ORM 連結 Oracle</title>
      <link>https://calvinegs.github.io/posts/dotnet6-webapi-oracle-dapper/</link>
      <pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/dotnet6-webapi-oracle-dapper/</guid>
      <description>採用 Dapper 這個小而美的 ORM 架構並以 Repository Pattern 來撰寫 ASP.NET Core 6 Web Api</description>
    </item>
    
    <item>
      <title>VS Code 中常用快捷鍵</title>
      <link>https://calvinegs.github.io/posts/vscod-shortcut/</link>
      <pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/vscod-shortcut/</guid>
      <description>VS Code 中常用的快捷鍵</description>
    </item>
    
    <item>
      <title>ASP.NET Core 5 Web API 加入權限管理 (Dotnet Core Identity Framework &#43; JWT)</title>
      <link>https://calvinegs.github.io/posts/dotnet5-webapi-ii/</link>
      <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/dotnet5-webapi-ii/</guid>
      <description>透過 Identity Framework 與 JWT 來為 ASP.NET Core 5.0 加入使用者權限管理功能</description>
    </item>
    
    <item>
      <title>型別推論(type inference) 與 型別註記(type annotation)</title>
      <link>https://calvinegs.github.io/posts/ts-type-inferenc-annotation/</link>
      <pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/ts-type-inferenc-annotation/</guid>
      <description>筆記 TypeScript 中所謂的 &amp;#39;型別推論&amp;#39;(type inference) 與 &amp;#39;型別註記&amp;#39;(type annotation)</description>
    </item>
    
    <item>
      <title>ASP.NET Core 5 Web API - 從無到有</title>
      <link>https://calvinegs.github.io/posts/dotnet5-webapi/</link>
      <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/dotnet5-webapi/</guid>
      <description>使用 ASP.NET Core 5.0 一步步從無到有 建立一個簡易的 Web API</description>
    </item>
    
    <item>
      <title>使用 nvs 來管理不同版本 Node.js 執行環境</title>
      <link>https://calvinegs.github.io/posts/nvs-using/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/nvs-using/</guid>
      <description>開發環境為了不同的目的可能會同時使用到不同版本的 Node.js，透過 nvs 工具可以有效、快速切換各個版本的 Node.js 開發環境</description>
    </item>
    
    <item>
      <title>Angular cli 與 Node.js 版本對照</title>
      <link>https://calvinegs.github.io/posts/ngcli-nodejs-verion/</link>
      <pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/ngcli-nodejs-verion/</guid>
      <description>Angular &amp;amp; cli 與 Node.js &amp;amp; TypeScript 版本對照表</description>
    </item>
    
    <item>
      <title>設置 TypeScript 開發環境 (Node.js)</title>
      <link>https://calvinegs.github.io/posts/setup-typescript-env/</link>
      <pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/setup-typescript-env/</guid>
      <description>建置一個學習 Typescript 的開發環境 (Node.js)</description>
    </item>
    
    <item>
      <title>Hugo 中使用的 Markdown 語法介紹</title>
      <link>https://calvinegs.github.io/posts/markdown-syntax/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://calvinegs.github.io/posts/markdown-syntax/</guid>
      <description>以範例來說明 Hugo 所支援的 Markdown 語法 </description>
    </item>
    
    <item>
      <title>在 Github Pages 部署 Hugo 靜態網站</title>
      <link>https://calvinegs.github.io/posts/deployhugo-githubpages/</link>
      <pubDate>Wed, 01 Dec 2021 17:17:02 +0800</pubDate>
      
      <guid>https://calvinegs.github.io/posts/deployhugo-githubpages/</guid>
      <description>GitHub Page 功能是 GitHub 提供的一項支援靜態網頁的服務，只要在你的 repository 中加入一個名為 gh-pages 的分支，則 GitHub 便會預設將此分支內的檔案以靜態網頁的方式呈現，因此利用此特性就可很容易的製作一個簡單的網站。GitHub Pages 提供了二種不同形態的頁面 &amp;ldquo;User or organization site&amp;rdquo; &amp;amp; &amp;ldquo;Project Site&amp;rdquo;。其中個人/組織 網站一個 GitHub 帳號只能有一個、而專案網站則可以很多個。
 https://calvinegs.github.io #只有一個 https://calvinegs.github.io/project1
https://calvinegs.github.io/project2
https://calvinegs.github.io/project3
&amp;hellip;
 安裝步驟 Step 1: 在 GitHub 上建立一個 new repository Repository name 若為 Owner_name.github.io 即所謂的 User site，Repository name 即為靜態網站的網址。以下圖為例，有效網址為 https://calvinegs.github.io
Step 2: 使用 GitHub Action 構建 Hugo 透過 GitHub Action 功能，在你每次將新版本的 Hugo 網站內容推送到 GitHub repository 時，GitHub 將自動建置網站。
新增一個 .github/workflows/gh-pages.yml，內容如下:
name: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.</description>
    </item>
    
    <item>
      <title>在 Windows 10 使用 Hugo</title>
      <link>https://calvinegs.github.io/posts/installhugo-windows/</link>
      <pubDate>Sat, 27 Nov 2021 11:51:00 +0800</pubDate>
      
      <guid>https://calvinegs.github.io/posts/installhugo-windows/</guid>
      <description>Hugo 是一個静態網站生成器，搭配 git 很適合來建立個人部落格。在一系列的筆記中將介紹如何安裝/使用相關工具與技術，目的是搭建一個完全免費的個人部落格。
使用的相關工具/技術:
 Hugo git vs code gist github page Markdown  Chocolatey Chocolatey 是一個 Windows 上的套件管理工具，它結合了 Nuget 基礎服務與 powershell 指令，提供快速安裝應用程式與工具的服務，將安裝軟體的內容封裝到一個安裝包中，在 Chocolatey 中只需要一條簡單的指令就能完成搜尋、安裝、更新、解安裝等操作。
在 Windows 10 上安裝 Chocolatey 以‘系統管理員’身份開啟 &amp;lsquo;Windows PowerShell&amp;rsquo;,　執行以下指令來進行 Chocolatey 安裝
PS C:\&amp;gt;Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&amp;#39;https://community.chocolatey.org/install.ps1&amp;#39;)) 移除 Chocolatey 刪除 C:\ProgramData\chocolatey 目錄及移除環境變數即可，搜尋 &amp;ldquo;編輯系統環境變數&amp;rdquo; \ &amp;ldquo;進階&amp;rdquo; \ &amp;ldquo;環境變數&amp;rdquo;
安裝 hugo Step 1: 在 Windows 10 上使用 choco 安裝 hugo C:\&amp;gt; choco install hugo -confirm C:\&amp;gt; choco install hugo-extended - config C:\&amp;gt; hugo version Step 2: Create a New Site (建立部落格網站) C:\&amp;gt; hugo new site quickstart C:\&amp;gt; hugo new site quickstart -f yml # 若要使用 config.</description>
    </item>
    
    
    
  </channel>
</rss>
